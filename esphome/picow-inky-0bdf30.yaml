esphome:
  name: "picow-0bdf30"
  friendly_name: PicoW 0bdf30
  on_boot:
      priority: 200.0
      then:
        - component.update: eink_display
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
              # Wait a bit longer so all the items are received
        - delay: 5s
        - logger.log: "Initial sensor data received: Refreshing display..."
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen

rp2040:
  board: rpipicow
  framework:
    # Required until https://github.com/platformio/platform-raspberrypi/pull/36 is merged
    platform_version: https://github.com/maxgerhardt/platform-raspberrypi.git

# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19
  miso_pin: GPIO16

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "omP/0Qsnp7N1OVLoIPcGR+aB5D4ZVvYTf+bdxzWosaQ="

ota:
  password: "5b13a2aa6adfb94486381a7096ce9b4e"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot in case wifi connection fails
  ap:
    ssid: "Picow Fallback Hotspot"
    password: "MKRXkkW0dwlN"

output:
  - platform: gpio
    pin:
      number: GPIO32
      mode: output
    id: LED

interval:
  - interval: 500ms
    then:
      - output.turn_on: LED
      - delay: 250ms
      - output.turn_off: LED

###############################################################################
###############################################################################
###############################################################################

button:
  - platform: shutdown
    name: "Shutdown"
  - platform: restart
    name: "Restart"
  - platform: template
    name: "Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen
      
      
# Global variables for detecting if the display needs to be refreshed. (Thanks @paviro!)
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'


# Script for updating screen - Refresh display and publish refresh count and time. (Thanks @paviro!)
script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'
      

# Check whether the display needs to be refreshed every minute,
# based on whether new data is received or motion is detected. (Thanks @paviro!)
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - if:
              condition:
                lambda: 'return id(data_updated) == true;'
              then:
                - if:
                    condition:
                      binary_sensor.is_on: hallway_motion_detected
                    then:
                      - logger.log: "Sensor data updated and activity in home detected: Refreshing display..."
                      - script.execute: update_screen
                    else:
                      - logger.log: "Sensor data updated but no activity in home - skipping display refresh."
              else:
                - logger.log: "No sensors updated - skipping display refresh."


###############################################################################
###############################################################################
###############################################################################

binary_sensor:
  - platform: status
    name: "PicoW Status"
  - platform: gpio
    pin:
      number: GPIO12
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Button A"
    id: button_a
    filters:
      - delayed_on_off: 10ms
  - platform: gpio
    pin:
      number: GPIO13
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Button B"
    id: button_b
    filters:
      - delayed_on_off: 10ms
  - platform: gpio
    pin:
      number: GPIO14
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Button C"
    id: button_c
    filters:
      - delayed_on_off: 10ms

  - platform: homeassistant
    entity_id: binary_sensor.hallway_motion_motion
    id: hallway_motion_detected

sensor:
  - platform: homeassistant
    entity_id: sensor.front_garden_climate_temperature 
    id: weather_current_temp
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.front_garden_climate_humidity
    id: weather_current_humidity
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'
    
  - platform: homeassistant
    entity_id: sensor.front_garden_climate_pressure
    id: weather_current_pressure
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: binary_sensor.picow_0bdf30_button_a
    id: ha_picow_0bdf30_button_a
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  # Create sensors for monitoring SmartFrame remotely.
  - platform: template
    name: "Display Last Update"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
    
  - platform: template
    name: "Recorded Display Refresh"
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'
  
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

###############################################################################
###############################################################################
###############################################################################

# Include custom fonts
font:
  - file: gfonts://Roboto
    id: text_med
    size: 20

# Now render everything on the ePaper screen (480x800)
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO17
    dc_pin: GPIO20
    busy_pin: GPIO26
    reset_pin: GPIO21
    #reset_duration: 2ms
    #model: 2.90in-b
    model: gdey029t94
    update_interval: never
    #rotation: 270°
    lambda: |-
      int panel_x = it.get_width();
      int panel_y = it.get_height();
      int panel_x_mid = panel_x / 2;
      int panel_y_mid = panel_y / 2;

      // Show loading screen before data is received.
      if (id(initial_data_received) == false) {
        it.printf(panel_x_mid, panel_y_mid - 30, id(text_med), COLOR_ON, TextAlign::CENTER, "WAITING", COLOR_OFF);
        it.printf(panel_x_mid, panel_y_mid, id(text_med), COLOR_ON, TextAlign::CENTER, "FOR", COLOR_OFF);
        it.printf(panel_x_mid, panel_y_mid + 30, id(text_med), COLOR_ON, TextAlign::CENTER, "DATA", COLOR_OFF);        
      } else {
        it.printf(panel_x_mid, 20, id(text_med), COLOR_ON, TextAlign::CENTER, "TODAY", COLOR_OFF);

        it.printf(panel_x_mid, 50, id(text_med), COLOR_ON, TextAlign::CENTER, "%2.0f °C", id(weather_current_temp).state, COLOR_OFF);
        it.printf(panel_x_mid, 80, id(text_med), COLOR_ON, TextAlign::CENTER, "%2.0f %", id(weather_current_humidity).state, COLOR_OFF);
        it.printf(panel_x_mid, 110, id(text_med), COLOR_ON, TextAlign::CENTER, "%2.0f hPa", id(weather_current_pressure).state, COLOR_OFF);                
      }
