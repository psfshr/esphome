###############################################################################
# NOTES #######################################################################
###############################################################################

# https://www.waveshare.com/e-paper-esp32-driver-board.htm
# https://www.waveshare.com/wiki/E-Paper_ESP32_Driver_Board
# https://files.waveshare.com/upload/8/80/E-Paper_ESP32_Driver_Board_Schematic.pdf

# Can't use GPIO 13, 14, 15, 25, 26, 27 as they're on the ePaper connector

# https://esphome.io/components/i2c
# https://esphome.io/components/uart

# https://esphome.io/components/sensor/ld2420


###############################################################################
# BASE DEVICE CONFIG ##########################################################
###############################################################################

substitutions:
  name: waveshare-epaper-6625d8
  friendly_name: Study SmartFrame 6625d8

esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}
  on_boot:
      priority: 200.0
      then:
        - component.update: eink_display
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
        - delay: 5s # Wait a bit longer so all the items are received
        - logger.log: "Initial data received. Refreshing display"
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen

esp32:
  board: esp32dev
  framework:
    type: esp-idf

###############################################################################

# Wifi information
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: ${name}
    password: ${name}

api:
  encryption:
    key: "VJMi9X5Fk8nSx/45ycpJzCBrWyF4XxG2TyTheGcjgdY="
ota:
  password: "3a328410f03e6b4c2e45ba985dc11ad7"

# Enable logging
logger:
#  level: VERBOSE #DEBUG

###############################################################################
# INPUTS & OUTPUTS ############################################################
###############################################################################

# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

# uart:
#   id: ld2420_uart
#   tx_pin: GPIO23
#   rx_pin: GPIO22
#   baud_rate: 115200
#   parity: NONE
#   stop_bits: 1

output:
  - platform: gpio
    pin:
      number: GPIO2
      mode: output
    id: LED

# ld2420:

###############################################################################
# VARIABLES & SCRIPTS #########################################################
###############################################################################

# Global variables for detecting if the display needs to be refreshed
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: external_trigger
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: time_since_refresh
    type: int
    restore_value: no
    initial_value: '0'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

# Script for updating screen - Refresh display and publish refresh count and time.
script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - lambda: 'id(external_trigger) = false;'
      - lambda: 'id(time_since_refresh) = 0;'
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'

# Check whether the display needs to be refreshed
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - output.turn_on: LED
          - delay: 250ms
          - output.turn_off: LED
          - if:
              condition:
                and:
                  - lambda: 'return id(data_updated) == true;' # We have to have had new sensor data
                  - lambda: 'return id(external_trigger) == true;' # We have to had had an external (presense) trigger
                  - lambda: 'return id(time_since_refresh) >= 5;' # It has to have been at least 5 minutes since the last refresh
              then:
                - logger.log:
                    format: "Refreshing display - States are: Sensor Data %d / Activity Trigger %d / Rate Limit Timer %u"
                    args: [ 'id(data_updated)', 'id(external_trigger)', 'id(time_since_refresh)' ]
                - script.execute: update_screen
              else:
                - logger.log:
                    format: "Skipping display refresh -  States are: Sensor Data %d / Activity Trigger %d / Rate Limit Timer %u"
                    args: [ 'id(data_updated)', 'id(external_trigger)', 'id(time_since_refresh)' ]
                - lambda: 'id(time_since_refresh) += 1;'

# number:
#   - platform: ld2420
#     presence_timeout:
#       name: Detection Presence Timeout
#     min_gate_distance:
#       name: Detection Gate Minimum
#     max_gate_distance:
#       name: Detection Gate Maximum
    # gate_select:
    #   name: Select Gate to Set
    # still_threshold:
    #   name: Set Still Threshold Value
    # move_threshold:
    #   name: Set Move Threshold Value

###############################################################################
# HOME ASSISTANT BUTTONS ######################################################
###############################################################################

button:
  - platform: shutdown
    name: "Shutdown"
  - platform: restart
    name: "Restart"
  - platform: safe_mode
    name: ${friendly_name} Restart (Safe Mode)
  - platform: template
    name: "Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen

  # - platform: ld2420
  #   apply_config:
  #     name: Apply Config
  #   factory_reset:
  #     name: Factory Reset
  #   restart_module:
  #     name: Restart Module
  #   revert_config:
  #     name: Undo Edits

# select:
#   - platform: ld2420
#     operating_mode:
#       name: Operating Mode

switch:
  - platform: factory_reset
    name: Factory Reset

###############################################################################
# SENSORS #####################################################################
###############################################################################

binary_sensor:
  # Device Sensors - for monitoring device remotely
  - platform: status
    name: "Status"

  # Home Assistant General Sensors
  - platform: homeassistant
    entity_id: binary_sensor.waveshare_epaper_6625d8_trigger
    id: waveshare_epaper_6625d8_trigger
    on_press:
      then:
        - lambda: 'id(external_trigger) = true;'

  # - platform: ld2420
  #   has_target:
  #     name: Presence

###############################################################################

text_sensor:
  # Home Assistant General Sensors
  - platform: homeassistant
    entity_id: sensor.timeofday_greeting
    id: timeofday_greeting
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'  

  # Pollen Sensors
  - platform: homeassistant
    entity_id: sensor.pollen_day_0
    attribute: grassIndex
    id: pollen_now_grass
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.pollen_day_0
    attribute: treeIndex
    id: pollen_now_tree
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.pollen_day_0
    attribute: weedIndex
    id: pollen_now_weed
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  # Weather Sensors
  - platform: homeassistant
    entity_id: sensor.weather_now
    id: weather_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime0
    id: hourly_forecast_shorttime0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime1
    id: hourly_forecast_shorttime1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime2
    id: hourly_forecast_shorttime2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime3
    id: hourly_forecast_shorttime3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime4
    id: hourly_forecast_shorttime4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime0
    id: hourly_forecast_datetime0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime1
    id: hourly_forecast_datetime1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime2
    id: hourly_forecast_datetime2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime3
    id: hourly_forecast_datetime3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime4
    id: hourly_forecast_datetime4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition0
    id: hourly_forecast_condition0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition1
    id: hourly_forecast_condition1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition2
    id: hourly_forecast_condition2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition3
    id: hourly_forecast_condition3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition4
    id: hourly_forecast_condition4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  # - platform: ld2420
  #   fw_version:
  #     name: LD2420 Firmware

###############################################################################

sensor:
    #Device UPTIME
  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  # Device Sensors - for monitoring device remotely
  - platform: template
    name: "Display Last Update"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
    
  - platform: template
    name: "Recorded Display Refresh"
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'
  
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

  # Home Assistant General Sensors

  # Weather Sensors
  - platform: homeassistant
    entity_id: sensor.front_garden_climate_temperature
    id: temperature_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.front_garden_climate_humidity
    id: humidity_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.front_garden_climate_pressure
    id: pressure_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature0
    id: hourly_forecast_temperature0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature1
    id: hourly_forecast_temperature1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature2
    id: hourly_forecast_temperature2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature3
    id: hourly_forecast_temperature3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature4
    id: hourly_forecast_temperature4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  # - platform: ld2420
  #   moving_distance:
  #     name : Moving Distance

###############################################################################
# FONTS & TEXT ################################################################
###############################################################################

# Include custom fonts
font:
  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_small
    size: 15
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_med
    size: 25
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'" ]
  
  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_large
    size: 30
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_title
    size: 50
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'" ]

  - file: "https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_glyphs_med
    size: 40
    glyphs: &mdi-glyphs
      - "\U000F0594" # weather-night / clear-night
      - "\U000F0590" # weather-cloudy / cloudy
      - "\U000F0591" # weather-fog / fog
      - "\U000F0592" # weather-hail / hail
      - "\U000F0593" # weather-lightning / lightning
      - "\U000F067E" # weather-lightning-rainy / lightning-rainy
      - "\U000F0595" # weather-partly-cloudy / partlycloudy
      - "\U000F0596" # weather-pouring / pouring
      - "\U000F0597" # weather-rainy / rainy
      - "\U000F0598" # weather-snowy / snowy
      - "\U000F067F" # weather-snowy-rainy / snowy-rainy
      - "\U000F0599" # weather-sunny / sunny
      - "\U000F059D" # weather-windy / windy
      - "\U000F059E" # weather-windy-variant / windy-variant
      - "\U000F1C78" # weather-hurricane-outline / exceptional
      - "\U000F0F31" # weather-night-partly-cloudy / partlycloudy-night
      - "\U000F02D6" # Blank
      - "\U000F05CE" # clock-alert-outline
      - "\U000F0531" # tree
      - "\U000F1510" # grass
      - "\U000F07A6" # weed

  - file: "https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_glyphs_large
    size: 60
    glyphs: *mdi-glyphs

###############################################################################
# DISPLAY RENDERING ###########################################################
###############################################################################

# Now render everything on the ePaper screen
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin:
      number: 25
      inverted: True
    reset_pin: GPIO26
    reset_duration: 2ms
    model: 7.50inV2
    update_interval: never
    #rotation: 90°
    lambda: |-
      // https://stackoverflow.com/questions/4479017/storing-std-map-in-map

      std::map<std::string, std::string> font_icon_map
      {
        {"clear-night", "\U000F0594"},
        {"cloudy", "\U000F0590"},
        {"fog", "\U000F0591"},
        {"hail", "\U000F0592"},
        {"lightning", "\U000F0593"},
        {"lightning-rainy", "\U000F067E"},
        {"partlycloudy", "\U000F0595"},
        {"pouring", "\U000F0596"},
        {"rainy", "\U000F0597"},
        {"snowy", "\U000F0598"},
        {"snowy-rainy", "\U000F067F"},
        {"sunny", "\U000F0599"},
        {"windy", "\U000F059D"},
        {"windy-variant", "\U000F059E"},
        {"exceptional", "\U000F1C78"},
        {"partlycloudy-night", "\U000F0F31"},
        {"", "\U000F02D6"},
        {"clock-alert-outline", "\U000F05CE"},
        {"tree",  "\U000F0531"},
        {"grass",  "\U000F1510"},
        {"weed",  "\U000F07A6"},
      };

      // Panel
      int panel_x = it.get_width();
      int panel_y = it.get_height();
      int panel_x_mid = panel_x / 2;
      int panel_y_mid = panel_y / 2;

      // Title CENTER_LEFT
      int header_title_x = 15;
      int header_title_y = 35;

      // Date TOP_RIGHT
      int header_date_x = panel_x - 15;
      int header_date_y = 0;
      int header_date2_y = 35;

      // Dividers
      int horizontal_divider1_x1 = 15;
      int horizontal_divider1_y1 = 80;
      int horizontal_divider1_x2 = panel_x - 15;
      int horizontal_divider1_y2 = 80;

      int vertical_divider_x1 = 545;
      int vertical_divider_y1 = horizontal_divider1_y1 + 15;
      int vertical_divider_x2 = 545;
      int vertical_divider_y2 = panel_y - 15;

      int horizontal_divider2_x1 = vertical_divider_x1 + 15;
      int horizontal_divider2_y1 = 205;
      int horizontal_divider2_x2 = panel_x - 15;
      int horizontal_divider2_y2 = 205;

      int horizontal_divider3_x1 = 15;
      int horizontal_divider3_y1 = panel_y - 80;
      int horizontal_divider3_x2 = 530;
      int horizontal_divider3_y2 = panel_y - 80;

      // Now
      int forecast_now1_x = 605;
      int forecast_now1_y = 120;
      int forecast_now2_x = 675;
      int forecast_now2_y = 120;
      int forecast_now3_x = 740;
      int forecast_now3_y = 120;

      int pollen_col1_x = 590;
      int pollen_col2_x = pollen_col1_x + 30;
      int pollen_col3_x = pollen_col2_x + 40;
      int pollen_col4_x = pollen_col3_x + 30;
      int pollen_col5_x = pollen_col4_x + 40;
      int pollen_col6_x = pollen_col5_x + 30;
      int pollen_row1_y = 175;

      // Forecast
      int forecast_col1_x = 605; // CENTER
      int forecast_col2_x = 675; // CENTER
      int forecast_col3_x = 740; // CENTER

      int forecast_row1_y = horizontal_divider2_y1 + 35;
      int forecast_row2_y = forecast_row1_y + 50;
      int forecast_row3_y = forecast_row2_y + 50;
      int forecast_row4_y = forecast_row3_y + 50;
      int forecast_row5_y = forecast_row4_y + 50;

      // Pollen


      if (id(initial_data_received) == false) {
        // Show loading screen before data is received.
        it.printf(panel_x_mid, panel_y_mid - 35, id(mdi_glyphs_large), TextAlign::CENTER, font_icon_map["clock-alert-outline"].c_str());
        it.printf(panel_x_mid, panel_y_mid + 35, id(text_large), TextAlign::CENTER, "WAITING FOR DATA");
      } else {
        // Top Panel - Header
        it.printf(header_title_x, header_title_y, id(text_title), TextAlign::CENTER_LEFT, "Good %s", id(timeofday_greeting).state.c_str());

        it.strftime(header_date_x, header_date_y, id(text_large), TextAlign::TOP_RIGHT, "%A", id(homeassistant_time).now());
        it.strftime(header_date_x, header_date2_y, id(text_large), TextAlign::TOP_RIGHT, "%e %B %Y", id(homeassistant_time).now());

        it.line(horizontal_divider1_x1, horizontal_divider1_y1, horizontal_divider1_x2, horizontal_divider1_y2);

        // Left Panel - ???

        it.line(vertical_divider_x1, vertical_divider_y1, vertical_divider_x2, vertical_divider_y2);

        // Right Panel - Weather Forecast

        it.printf(forecast_now1_x, forecast_now1_y, id(mdi_glyphs_large), TextAlign::CENTER, "%s", font_icon_map[id(weather_now).state.c_str()].c_str());
        it.printf(forecast_now2_x, forecast_now2_y, id(text_med), TextAlign::CENTER, "%2.0f°C", id(temperature_now).state);
        it.printf(forecast_now3_x, forecast_now3_y, id(text_med), TextAlign::CENTER, "%2.0f%%", id(humidity_now).state);

        it.printf(pollen_col1_x, pollen_row1_y, id(mdi_glyphs_med), TextAlign::CENTER, "%s", font_icon_map["tree"].c_str());
        it.printf(pollen_col2_x, pollen_row1_y, id(text_med), TextAlign::CENTER, "%s", id(pollen_now_grass).state.c_str());
        it.printf(pollen_col3_x, pollen_row1_y, id(mdi_glyphs_med), TextAlign::CENTER, "%s", font_icon_map["grass"].c_str());
        it.printf(pollen_col4_x, pollen_row1_y, id(text_med), TextAlign::CENTER, "%s", id(pollen_now_tree).state.c_str());
        it.printf(pollen_col5_x, pollen_row1_y, id(mdi_glyphs_med), TextAlign::CENTER, "%s", font_icon_map["weed"].c_str());
        it.printf(pollen_col6_x, pollen_row1_y, id(text_med), TextAlign::CENTER, "%s", id(pollen_now_weed).state.c_str());

        it.line(horizontal_divider2_x1, horizontal_divider2_y1, horizontal_divider2_x2, horizontal_divider2_y2);

        it.printf(forecast_col1_x, forecast_row1_y, id(text_med), TextAlign::CENTER, "%s", id(hourly_forecast_shorttime0).state.c_str());
        it.printf(forecast_col2_x, forecast_row1_y, id(mdi_glyphs_med), TextAlign::CENTER, "%s", font_icon_map[id(hourly_forecast_condition0).state.c_str()].c_str());
        it.printf(forecast_col3_x, forecast_row1_y, id(text_med), TextAlign::CENTER, "%2.0f°C", id(hourly_forecast_temperature0).state);

        it.printf(forecast_col1_x, forecast_row2_y, id(text_med), TextAlign::CENTER, "%s", id(hourly_forecast_shorttime1).state.c_str());
        it.printf(forecast_col2_x, forecast_row2_y, id(mdi_glyphs_med), TextAlign::CENTER, "%s", font_icon_map[id(hourly_forecast_condition1).state.c_str()].c_str());
        it.printf(forecast_col3_x, forecast_row2_y, id(text_med), TextAlign::CENTER, "%2.0f°C", id(hourly_forecast_temperature1).state);

        it.printf(forecast_col1_x, forecast_row3_y, id(text_med), TextAlign::CENTER, "%s", id(hourly_forecast_shorttime2).state.c_str());
        it.printf(forecast_col2_x, forecast_row3_y, id(mdi_glyphs_med), TextAlign::CENTER, "%s", font_icon_map[id(hourly_forecast_condition2).state.c_str()].c_str());
        it.printf(forecast_col3_x, forecast_row3_y, id(text_med), TextAlign::CENTER, "%2.0f°C", id(hourly_forecast_temperature2).state);

        it.printf(forecast_col1_x, forecast_row4_y, id(text_med), TextAlign::CENTER, "%s", id(hourly_forecast_shorttime3).state.c_str());
        it.printf(forecast_col2_x, forecast_row4_y, id(mdi_glyphs_med), TextAlign::CENTER, "%s", font_icon_map[id(hourly_forecast_condition3).state.c_str()].c_str());
        it.printf(forecast_col3_x, forecast_row4_y, id(text_med), TextAlign::CENTER, "%2.0f°C", id(hourly_forecast_temperature3).state);

        it.printf(forecast_col1_x, forecast_row5_y, id(text_med), TextAlign::CENTER, "%s", id(hourly_forecast_shorttime4).state.c_str());
        it.printf(forecast_col2_x, forecast_row5_y, id(mdi_glyphs_med), TextAlign::CENTER, "%s", font_icon_map[id(hourly_forecast_condition4).state.c_str()].c_str());
        it.printf(forecast_col3_x, forecast_row5_y, id(text_med), TextAlign::CENTER, "%2.0f°C", id(hourly_forecast_temperature4).state);

        it.line(horizontal_divider3_x1, horizontal_divider3_y1, horizontal_divider3_x2, horizontal_divider3_y2);

        // Bottom Panel - ???

        // Refresh Timestamp
        it.strftime(10, panel_y - 10, id(text_small), TextAlign::BOTTOM_LEFT, "%H:%M", id(homeassistant_time).now());
      }

###############################################################################
