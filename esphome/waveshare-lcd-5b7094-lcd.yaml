###############################################################################
# NOTES #######################################################################
###############################################################################

# https://www.waveshare.com/wiki/ESP32-S3-Zero
# https://files.waveshare.com/wiki/ESP32-S3-Zero/ESP32-S3-Zero-Sch.pdf


# https://www.aliexpress.com/item/1005005791515997.html
# Resolution:480*320
# Drive ic:ili9488

# 1 VCC power input (3.3V~5V) - 5V - White
# 2 GND power supply ground - Purple

# 3 CS LCD film selection - GPIO7 - Brown
# 4 RESET LCD reset - GPIO8 - Red
# 5 DC LCD bus command/data selection - GPIO9 - Orange
# 6 SDI (MoSi) LCD SPI display bus data input - GPIO10 - Yellow
# 7 SCK LCD SPI display bus clock signal - GPIO11 - Green
# 8 LED LCD backlight control (high level lighting) - GPIO12 - Blue
# 9 SDO (MISO) LCD SPI display bus data input and output - GPIO13 - Purple

# 10 t _ clk SPI bus clock signal of touch panel - GPIO06 - Yellow
# 11 t _ cs Chip selection of SPI bus for touch panel - GPIO05 - Green
# 12 t _ din touch panel SPI bus data input - GPIO04 - Blue
# 13 t _ do touch panel SPI bus data output - GPIO03 - Purple
# 14 t _ IRQ touch panel interrupts IRQ signal - GPIO02 - Grey

###############################################################################
# BASE DEVICE CONFIG ##########################################################
###############################################################################

substitutions:
  name: waveshare-lcd-5b7094
  friendly_name: WaveShare LCD 5b7094

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  name_add_mac_suffix: false
  platformio_options:
    board_build.flash_mode: dio
  on_boot:
      priority: 200.0
      then:
        - component.update: lcd_display
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
        - delay: 5s # Wait a bit longer so all the items are received
        - logger.log: "Initial data received. Refreshing display"
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: esp-idf
    version: recommended
    sdkconfig_options:
      CONFIG_ESP32_S3_BOX_BOARD: "y"
   
psram:
  mode: quad
  speed: 80MHz


################################################################################

# Wifi information
wifi:
  ssid: DoceLar
  password: AnaPaul220309
  ap:
    ssid: ${name}
    password: ${name}

captive_portal:

# Enable Home Assistant API
api:
  encryption:
    key: "XbC7pgXBoGvZRAHQOmt1KSZOnKW+sYSlKd4aPu2tHPQ="
ota:
  platform: esphome

# Enable logging
logger:

###############################################################################
# INPUTS & OUTPUTS ############################################################
###############################################################################

spi:
  - id: spi_lcd
    mosi_pin: GPIO10
    clk_pin: GPIO11
    miso_pin: GPIO13
    interface: any
  - id: spi_touch
    mosi_pin: GPIO4
    clk_pin: GPIO6
    miso_pin: GPIO3
    interface: any

output:
  - platform: gpio
    pin:
      number: GPIO21
      mode: output
    id: LED
  - platform: ledc # Define a PWM output on the ESP32
    pin: GPIO12
    id: backlight_pwm

# Define a monochromatic, dimmable light for the backlight
light:
  - platform: monochromatic
    output: backlight_pwm
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

###############################################################################
# VARIABLES & SCRIPTS #########################################################
###############################################################################

# Global variables for detecting if the display needs to be refreshed
globals:
  - id: cpu_speed
    type: int
    restore_value: no
    initial_value: "0"
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: time_since_refresh
    type: int
    restore_value: no
    initial_value: '0'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

# Script for updating screen - Refresh display and publish refresh count and time.
script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - lambda: 'id(time_since_refresh) = 0;'
      - component.update: lcd_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'

# Check whether the display needs to be refreshed
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time_sync:
      then:
        - logger.log: "Synchronized system clock"
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - output.turn_on: LED
          - if:
              condition:
                and:
                  - lambda: 'return id(data_updated) == true;' # We have to have had new sensor data
                  - lambda: 'return id(time_since_refresh) >= 5;' # It has to have been at least 5 minutes since the last refresh
              then:
                - logger.log:
                    format: "Refreshing display - States are: Sensor Data %d / Rate Limit Timer %u"
                    args: [ 'id(data_updated)', 'id(time_since_refresh)' ]
                - script.execute: update_screen
              else:
                - logger.log:
                    format: "Skipping display refresh -  States are: Sensor Data %d / Rate Limit Timer %u"
                    args: [ 'id(data_updated)', 'id(time_since_refresh)' ]
                - lambda: 'id(time_since_refresh) += 1;'
          - output.turn_off: LED

###############################################################################
# HOME ASSISTANT BUTTONS ######################################################
###############################################################################

button:
  - platform: shutdown
    name: ESP32 Shutdown
  - platform: restart
    name: ESP32 Restart
  - platform: safe_mode
    name: ESP32 Restart (Safe Mode)
  - platform: template
    name: ESP32 Refresh Screen
    entity_category: config
    on_press:
      - script.execute: update_screen

switch:
  - platform: factory_reset
    name: ESP32 Factory Reset

###############################################################################
# SENSORS #####################################################################
###############################################################################

binary_sensor:
  - platform: status
    name: ESP32 Status


###############################################################################

#text_sensor:

###############################################################################

sensor:
    #Device UPTIME
  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  # Device Sensors - for monitoring device remotely
  - platform: template
    name: Display Last Update
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
    
  - platform: template
    name: Display Num Refresh
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'
  
  - platform: wifi_signal
    name: ESP32 WiFi Signal
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

    #Device CPU Speed
  - platform: template
    name: "ESP Cpu Speed"
    accuracy_decimals: 0
    unit_of_measurement: Mhz
    lambda: |-
      return (id(cpu_speed));
    entity_category: "diagnostic"

    #Device Memory
  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: ESP Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: "diagnostic"

  # Weather Sensors - Now
  - platform: homeassistant
    entity_id: sensor.front_garden_climate_temperature
    id: temperature_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.front_garden_climate_humidity
    id: humidity_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.front_garden_climate_pressure
    id: pressure_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'


################################################################################





###############################################################################
# FONTS & TEXT ################################################################
###############################################################################

# Include custom fonts
font:
  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_med
    size: 25
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'", "Â£" ]

  - file: "https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_glyphs_med
    size: 40
    glyphs: &mdi-glyphs
      - "\U000F05CE" # clock-alert-outline

  - file: "https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: mdi_glyphs_large
    size: 60
    glyphs: *mdi-glyphs


color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

###############################################################################
# DISPLAY RENDERING ###########################################################
###############################################################################

touchscreen:
  - platform: xpt2046
    id: my_touchscreen
    spi_id: spi_touch
    display: lcd_display
    cs_pin: GPIO5
    #interrupt_pin: GPIO2
    update_interval: 50ms
    threshold: 400
    transform:
      swap_xy: false
      mirror_x: false
      mirror_y: false
    calibration:
      x_min: 250
      x_max: 3800
      y_min: 3896
      y_max: 208
    on_touch:
      - lambda: |-
            ESP_LOGI("Touch:touch : ", "x=%d, y=%d, x_raw=%d, y_raw=%0d",
                touch.x,
                touch.y,
                touch.x_raw,
                touch.y_raw
                );
    # on_update:
    #   - lambda: |-
    #         for (auto touch: touches)  {
    #             if (touch.state <= 2) {
    #               ESP_LOGI("Touch:update : ", "id=%d x=%d, y=%d", touch.id, touch.x, touch.y);
    #             }
    #         }
    # on_release:
    #   - lambda: |-
    #               ESP_LOGI("Touch:release : ", "release");

display:
  - platform: ili9xxx
    model: ILI9488
    id: lcd_display
    spi_id: spi_lcd
    dc_pin: GPIO9
    reset_pin: GPIO8
    cs_pin: GPIO7
    color_order: bgr
    invert_colors: false
    transform:
      swap_xy: false
      mirror_x: false
      mirror_y: false
#    dimensions:
#      height: 480
#      width: 320
    update_interval: never
#    show_test_card: true
    lambda: |-
      std::map<std::string, std::string> font_icon_map
      {
        {"clock-alert-outline", "\U000F05CE"},
      };

      // Panel
      int panel_x = it.get_width();
      int panel_y = it.get_height();
      int panel_x_mid = panel_x / 2;
      int panel_y_mid = panel_y / 2;

      it.fill(black);
      it.rectangle(0, 0, panel_x, panel_y, my_white);

      if (id(initial_data_received) == false) {

        // Show loading screen before data is received.
        it.printf(panel_x_mid, panel_y_mid - 35, id(mdi_glyphs_large), my_white, TextAlign::CENTER, font_icon_map["clock-alert-outline"].c_str());
        it.printf(panel_x_mid, panel_y_mid + 35, id(text_med), my_white, TextAlign::CENTER, "WAITING FOR DATA");

      } else {

        it.print(panel_x_mid, 40, id(text_med), my_red, TextAlign::CENTER, "Hello World!");
        it.printf(panel_x_mid, 80, id(text_med), my_blue, TextAlign::CENTER, "%d", id(recorded_display_refresh));

        it.printf(panel_x_mid, 120, id(text_med), my_white, TextAlign::CENTER, "%2.0fÂ°C", id(temperature_now).state);
        it.printf(panel_x_mid, 160, id(text_med), my_white, TextAlign::CENTER, "%2.0f%%", id(humidity_now).state);
        it.printf(panel_x_mid, 200, id(text_med), my_white, TextAlign::CENTER, "%2.0f%%", id(pressure_now).state);

        it.print(40, 400, id(text_med), my_red, TextAlign::CENTER, "R");
        it.print(80, 400, id(text_med), my_green, TextAlign::CENTER, "G");
        it.print(120, 400, id(text_med), my_blue, TextAlign::CENTER, "B");
        it.print(160, 400, id(text_med), my_white, TextAlign::CENTER, "W");

      }