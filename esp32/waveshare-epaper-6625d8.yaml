###############################################################################
# BASE DEVICE CONFIG ##########################################################
###############################################################################

substitutions:
  name: waveshare-epaper-6625d8
  friendly_name: Study SmartFrame 6625d8

esphome:
  name: ${name}
  name_add_mac_suffix: false
  friendly_name: ${friendly_name}
  on_boot:
      priority: 200.0
      then:
        - component.update: eink_display
        - wait_until:
            condition:
              lambda: 'return id(data_updated) == true;'
          # Wait a bit longer so all the items are received
        - delay: 5s
        - logger.log: "Initial sensor data received: Refreshing display..."
        - lambda: 'id(initial_data_received) = true;'
        - script.execute: update_screen

esp32:
  board: esp32dev
  framework:
    type: arduino

# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

# Wifi information
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${name}
    password: ${name}

captive_portal:

# Enable Home Assistant API
api:
  encryption:
    key: "VJMi9X5Fk8nSx/45ycpJzCBrWyF4XxG2TyTheGcjgdY="
ota:
  password: "3a328410f03e6b4c2e45ba985dc11ad7"

# Enable logging
logger:
#  level: VERBOSE #DEBUG

###############################################################################
# INPUTS & OUTPUTS ############################################################
###############################################################################

output:
  - platform: gpio
    pin:
      number: GPIO2
      mode: output
    id: LED

###############################################################################
# VARIABLES & SCRIPTS #########################################################
###############################################################################

# Global variables for detecting if the display needs to be refreshed
globals:
  - id: data_updated
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: initial_data_received
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: external_trigger
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: time_since_refresh
    type: int
    restore_value: yes
    initial_value: '0'
  - id: recorded_display_refresh
    type: int
    restore_value: yes
    initial_value: '0'

# Script for updating screen - Refresh display and publish refresh count and time.
script:
  - id: update_screen
    then:
      - lambda: 'id(data_updated) = false;'
      - lambda: 'id(external_trigger) = false;'
      - lambda: 'id(time_since_refresh) = 0;'
      - component.update: eink_display
      - lambda: 'id(recorded_display_refresh) += 1;'
      - lambda: 'id(display_last_update).publish_state(id(homeassistant_time).now().timestamp);'

# Check whether the display needs to be refreshed every 1 minutes, based on whether new data is received and trigger is active
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - logger.log: "Ping!"
          - output.turn_on: LED
          - delay: 250ms
          - output.turn_off: LED
          - if:
              condition:
                lambda: 'return id(data_updated) == true;'
              then:
                - if:
                    condition:
                      binary_sensor.is_on: waveshare_epaper_6625d8_trigger
                    then:
                      - logger.log: "Sensor data updated and activity in home detected - refreshing display..."
                      - script.execute: update_screen
                    else:
                      - logger.log: "Sensor data updated but no activity in home - skipping display refresh."
                      - lambda: 'id(time_since_refresh) += 1;'
              else:
                - logger.log: "No sensors updated - skipping display refresh."
                - lambda: 'id(time_since_refresh) += 1;'

###############################################################################
# HOME ASSISTANT BUTTONS ######################################################
###############################################################################

button:
  - platform: shutdown
    name: "Shutdown"
  - platform: restart
    name: "Restart"
  - platform: template
    name: "Refresh Screen"
    entity_category: config
    on_press:
      - script.execute: update_screen

###############################################################################
# SENSORS #####################################################################
###############################################################################

binary_sensor:
  # Device Sensors - for monitoring device remotely
  - platform: status
    name: "Status"

  # Home Assistant General Sensors
  - platform: homeassistant
    entity_id: binary_sensor.waveshare_epaper_6625d8_trigger
    id: waveshare_epaper_6625d8_trigger
    on_press:
      then:
        - lambda: 'id(external_trigger) = true;'

###############################################################################

text_sensor:
  # Home Assistant General Sensors
  - platform: homeassistant
    entity_id: sensor.timeofday_greeting
    id: timeofday_greeting
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'  

  # Weather Sensors
  - platform: homeassistant
    entity_id: sensor.weather_now
    id: weather_now
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime0
    id: hourly_forecast_shorttime0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime1
    id: hourly_forecast_shorttime1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime2
    id: hourly_forecast_shorttime2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime3
    id: hourly_forecast_shorttime3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: shorttime4
    id: hourly_forecast_shorttime4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime0
    id: hourly_forecast_datetime0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime1
    id: hourly_forecast_datetime1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime2
    id: hourly_forecast_datetime2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime3
    id: hourly_forecast_datetime3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: datetime4
    id: hourly_forecast_datetime4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition0
    id: hourly_forecast_condition0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition1
    id: hourly_forecast_condition1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition2
    id: hourly_forecast_condition2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition3
    id: hourly_forecast_condition3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: condition4
    id: hourly_forecast_condition4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

###############################################################################

sensor:
  # Device Sensors - for monitoring device remotely
  - platform: template
    name: "Display Last Update"
    device_class: timestamp
    entity_category: "diagnostic"
    id: display_last_update
    
  - platform: template
    name: "Recorded Display Refresh"
    accuracy_decimals: 0
    unit_of_measurement: "Refreshes"
    state_class: "total_increasing"
    entity_category: "diagnostic"
    lambda: 'return id(recorded_display_refresh);'
  
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

  # Home Assistant General Sensors

  # Weather Sensors
  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature0
    id: hourly_forecast_temperature0
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature1
    id: hourly_forecast_temperature1
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature2
    id: hourly_forecast_temperature2
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature3
    id: hourly_forecast_temperature3
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'

  - platform: homeassistant
    entity_id: sensor.weather_forecast_hourly
    attribute: temperature4
    id: hourly_forecast_temperature4
    on_value:
      then:
        - lambda: 'id(data_updated) = true;'


###############################################################################
# FONTS & TEXT ################################################################
###############################################################################

# Include custom fonts
font:
  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_small
    size: 15
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_med
    size: 25
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'" ]
  
  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_large
    size: 30
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'" ]

  - file:
      type: gfonts
      family: Montserrat
      weight: 500
    id: text_title
    size: 50
    extras:
      file:
        type: gfonts
        family: Montserrat
        weight: 500
      glyphs: [ "'" ]

  - file: "https://cdn.jsdelivr.net/npm/@mdi/font@7.4.47/fonts/materialdesignicons-webfont.ttf"
    id: weather_icons_med
    size: 40
    glyphs: &mdi-weather-glyphs
      - "\U000F0594" # weather-night / clear-night
      - "\U000F0590" # weather-cloudy / cloudy
      - "\U000F0591" # weather-fog / fog
      - "\U000F0592" # weather-hail / hail
      - "\U000F0593" # weather-lightning / lightning
      - "\U000F067E" # weather-lightning-rainy / lightning-rainy
      - "\U000F0595" # weather-partly-cloudy / partlycloudy
      - "\U000F0596" # weather-pouring / pouring
      - "\U000F0597" # weather-rainy / rainy
      - "\U000F0598" # weather-snowy / snowy
      - "\U000F067F" # weather-snowy-rainy / snowy-rainy
      - "\U000F0599" # weather-sunny / sunny
      - "\U000F059D" # weather-windy / windy
      - "\U000F059E" # weather-windy-variant / windy-variant
      - "\U000F1C78" # weather-hurricane-outline / exceptional
      - "\U000F0F31" # weather-night-partly-cloudy / partlycloudy-night
      - "\U000F02D6" # Blank


###############################################################################
# DISPLAY RENDERING ###########################################################
###############################################################################

# Now render everything on the ePaper screen
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin:
      number: 25
      inverted: True
    reset_pin: GPIO26
    reset_duration: 2ms
    model: 7.50inV2
    update_interval: never
    #rotation: 90°
    lambda: |-
      // https://stackoverflow.com/questions/4479017/storing-std-map-in-map

      std::map<std::string, std::string> weather_icon_map
      {
        {"clear-night", "\U000F0594"},
        {"cloudy", "\U000F0590"},
        {"fog", "\U000F0591"},
        {"hail", "\U000F0592"},
        {"lightning", "\U000F0593"},
        {"lightning-rainy", "\U000F067E"},
        {"partlycloudy", "\U000F0595"},
        {"pouring", "\U000F0596"},
        {"rainy", "\U000F0597"},
        {"snowy", "\U000F0598"},
        {"snowy-rainy", "\U000F067F"},
        {"sunny", "\U000F0599"},
        {"windy", "\U000F059D"},
        {"windy-variant", "\U000F059E"},
        {"exceptional", "\U000F1C78"},
        {"partlycloudy-night", "\U000F0F31"},
        {"", "\U000F02D6"},
      };

      // Panel
      int panel_x = it.get_width();
      int panel_y = it.get_height();
      int panel_x_mid = panel_x / 2;
      int panel_y_mid = panel_y / 2;

      // Title CENTER_LEFT
      int header_title_x = 15;
      int header_title_y = 35;

      // Date TOP_RIGHT
      int header_date_x = panel_x - 15;
      int header_date_y = 0;
      int header_date2_y = 35;

      // Dividers
      int horizontal_divider1_x1 = 15;
      int horizontal_divider1_y1 = 80;
      int horizontal_divider1_x2 = panel_x - 15;
      int horizontal_divider1_y2 = 80;

      int vertical_divider_x1 = 550;
      int vertical_divider_y1 = horizontal_divider1_y1 + 15;
      int vertical_divider_x2 = 550;
      int vertical_divider_y2 = panel_y - 15;

      int horizontal_divider2_x1 = 15;
      int horizontal_divider2_y1 = panel_y - 80;
      int horizontal_divider2_x2 = 535;
      int horizontal_divider2_y2 = panel_y - 80;

      // Forecast
      int forecast_title_x = 675; // CENTER
      int forecast_time_x = 640; // CENTER_RIGHT
      int forecast_icon_x = 675; // CENTER
      int forecast_temp_x = 710; // CENTER_LEFT

      int forecast_title_y = 180;
      int forecast_first_y = forecast_title_y + 50;
      int forecast_second_y = forecast_first_y + 50;
      int forecast_third_y = forecast_second_y + 50;
      int forecast_fourth_y = forecast_third_y + 50;
      int forecast_fifth_y = forecast_fourth_y + 50;

      // Left Panel

      //ESP_LOGD("custom", id(homeassistant_time).now().strftime("%A %e %B %Y").c_str());
      // Levels:
      //  - ERROR: ESP_LOGE
      //  - WARNING: ESP_LOGW
      //  - INFO: ESP_LOGI
      //  - DEBUG: ESP_LOGD
      //  - VERBOSE: ESP_LOGV
      //  - VERY_VERBOSE: ESP_LOGVV


      // Show loading screen before data is received.
      if (id(initial_data_received) == false) {
        it.printf(panel_x_mid, panel_y_mid, id(text_small), COLOR_ON, TextAlign::CENTER, "WAITING FOR DATA...", COLOR_OFF);
      } else {
        // Top Panel - Header
        it.printf(header_title_x, header_title_y, id(text_title), COLOR_ON, TextAlign::CENTER_LEFT, "Good %s", id(timeofday_greeting).state.c_str(), COLOR_OFF);

        it.strftime(header_date_x, header_date_y, id(text_large), TextAlign::TOP_RIGHT, "%A", id(homeassistant_time).now());
        it.strftime(header_date_x, header_date2_y, id(text_large), TextAlign::TOP_RIGHT, "%e %B %Y", id(homeassistant_time).now());

        it.line(horizontal_divider1_x1, horizontal_divider1_y1, horizontal_divider1_x2, horizontal_divider1_y2);

        // Left Panel - ???


        it.line(vertical_divider_x1, vertical_divider_y1, vertical_divider_x2, vertical_divider_y2);

        // Right Panel - Weather Forecast
        //it.printf(forecast_title_x, forecast_title_y , id(text_med), COLOR_ON, TextAlign::CENTER, "Weather Today", COLOR_OFF);

        it.printf(forecast_time_x, forecast_first_y, id(text_med), TextAlign::CENTER_RIGHT, "%s", id(hourly_forecast_shorttime0).state.c_str());
        it.printf(forecast_icon_x, forecast_first_y, id(weather_icons_med), TextAlign::CENTER, "%s", weather_icon_map[id(hourly_forecast_condition0).state.c_str()].c_str());
        it.printf(forecast_temp_x, forecast_first_y, id(text_med), TextAlign::CENTER_LEFT, "%2.0f°C", id(hourly_forecast_temperature0).state);

        it.printf(forecast_time_x, forecast_second_y, id(text_med), TextAlign::CENTER_RIGHT, "%s", id(hourly_forecast_shorttime1).state.c_str());
        it.printf(forecast_icon_x, forecast_second_y, id(weather_icons_med), TextAlign::CENTER, "%s", weather_icon_map[id(hourly_forecast_condition1).state.c_str()].c_str());
        it.printf(forecast_temp_x, forecast_second_y, id(text_med), TextAlign::CENTER_LEFT, "%2.0f°C", id(hourly_forecast_temperature1).state);

        it.printf(forecast_time_x, forecast_third_y, id(text_med), TextAlign::CENTER_RIGHT, "%s", id(hourly_forecast_shorttime2).state.c_str());
        it.printf(forecast_icon_x, forecast_third_y, id(weather_icons_med), TextAlign::CENTER, "%s", weather_icon_map[id(hourly_forecast_condition2).state.c_str()].c_str());
        it.printf(forecast_temp_x, forecast_third_y, id(text_med), TextAlign::CENTER_LEFT, "%2.0f°C", id(hourly_forecast_temperature2).state);

        it.printf(forecast_time_x, forecast_fourth_y, id(text_med), TextAlign::CENTER_RIGHT, "%s", id(hourly_forecast_shorttime3).state.c_str());
        it.printf(forecast_icon_x, forecast_fourth_y, id(weather_icons_med), TextAlign::CENTER, "%s", weather_icon_map[id(hourly_forecast_condition3).state.c_str()].c_str());
        it.printf(forecast_temp_x, forecast_fourth_y, id(text_med), TextAlign::CENTER_LEFT, "%2.0f°C", id(hourly_forecast_temperature3).state);

        it.printf(forecast_time_x, forecast_fifth_y, id(text_med), TextAlign::CENTER_RIGHT, "%s", id(hourly_forecast_shorttime4).state.c_str());
        it.printf(forecast_icon_x, forecast_fifth_y, id(weather_icons_med), TextAlign::CENTER, "%s", weather_icon_map[id(hourly_forecast_condition4).state.c_str()].c_str());
        it.printf(forecast_temp_x, forecast_fifth_y, id(text_med), TextAlign::CENTER_LEFT, "%2.0f°C", id(hourly_forecast_temperature4).state);

        it.line(horizontal_divider2_x1, horizontal_divider2_y1, horizontal_divider2_x2, horizontal_divider2_y2);

        // Bottom Panel - ???

        // Refresh Timestamp
        it.strftime(10, panel_y - 10, id(text_small), TextAlign::BOTTOM_LEFT, "%H:%M", id(homeassistant_time).now());
      }

###############################################################################
